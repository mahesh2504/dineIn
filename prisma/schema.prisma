generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String @unique
  password String

  @@map("admin")
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String        @unique
  password     String
  role         Role          @default(WAITER)
  reservations Reservation[]

  hasResetPassword Boolean @default(false)

  @@map("user")
}

model Waiter {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String @unique
  password String

  @@map("waiter")
}

model Customer {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  phoneNo     String
  reservation Reservation?

  @@map("customer")
}

model Table {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  no           String        @unique
  capacity     Int
  reservations Reservation[]

  @@map("table")
}

model Reservation {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  bookingDate   DateTime
  timeSlotStart DateTime
  timeSlotEnd   DateTime
  noOfPeople    Int
  status        ReservationStatus
  order         Order?
  bill          Bill?

  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customerId String   @unique @db.ObjectId
  table      Table?   @relation(fields: [tableId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tableId    String?  @db.ObjectId
  waiter     User?    @relation(fields: [waiterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  waiterId   String?  @db.ObjectId

  @@map("reservation")
}

model Menu {
  id       String      @id @default(auto()) @map("_id") @db.ObjectId
  name     String      @unique
  price    Float
  category String[]
  orders   MenuOrder[]

  @@map("menu")
}

model Order {
  id    String      @id @default(auto()) @map("_id") @db.ObjectId
  items MenuOrder[]
  bill  Bill?

  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reservationId String      @unique @db.ObjectId

  @@map("order")
}

model MenuOrder {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  quantity      Int
  amount        Float
  sentToKitchen Boolean @default(false)

  menu    Menu   @relation(fields: [menuId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  menuId  String @map("menu_id") @db.ObjectId
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId String @map("order_id") @db.ObjectId

  @@unique([menuId, orderId])
  @@map("item_order")
}

model Bill {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  amount        Float
  tax           Float
  tip           Float
  netAmount     Float
  splitInto     Int           @default(1)
  paymenyMethod PaymentMethod
  paymentStatus PaymentStatus @default(UNPAID)
  amountPaid    Float         @default(0)

  order         Order       @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId       String      @unique @db.ObjectId
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reservationId String      @unique @db.ObjectId

  @@map("payment")
}

enum Role {
  MANAGER
  WAITER
}

enum TableStatus {
  FREE
  OCCUPIED
}

enum PaymentStatus {
  PAID
  UNPAID
  REFUNDED
}

enum PaymentMethod {
  DEBIT_CARD
  CREDIT_CARD
}

enum ReservationStatus {
  CONFIRMED
  CANCELLED
  PENDING_PAYMENT
  COMPLETED
}
